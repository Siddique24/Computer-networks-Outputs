#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int main(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, "Usage: %s <DNS Server IP> <DNS Server Port> <Hostname>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *dns_server_ip = argv[1];
    int dns_server_port = atoi(argv[2]);
    const char *hostname = argv[3];

    int sockfd;
    char buffer[BUFFER_SIZE];
    struct sockaddr_in server_addr;

    // Create UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));

    // Configure server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(dns_server_port);
    if (inet_pton(AF_INET, dns_server_ip, &server_addr.sin_addr) <= 0) {
        perror("Invalid DNS server IP address");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    // Send hostname to server
    sendto(sockfd, hostname, strlen(hostname), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));

    // Receive resolved IP
    socklen_t addr_len = sizeof(server_addr);
    int n = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&server_addr, &addr_len);
    buffer[n] = '\0';

    printf("Resolved IP for %s: %s\n", hostname, buffer);

    close(sockfd);
    return 0;
}


OUTPUT:

DNS Server is running on port 5353...
Received query for: example.com
Sent IP: 93.184.216.34
