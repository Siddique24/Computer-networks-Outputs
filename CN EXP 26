#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>

#define PORT 8080

void run_server() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    time_t t;
    struct tm *tm_info;

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    // Bind socket
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server is running... Waiting for connections.\n");

    // Accept a client connection
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("Accept failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Get and send the current date and time
    time(&t);
    tm_info = localtime(&t);
    strftime(buffer, 1024, "Current Date and Time: %Y-%m-%d %H:%M:%S", tm_info);
    send(new_socket, buffer, strlen(buffer), 0);

    printf("Date and time sent to client.\n");

    close(new_socket);
    close(server_fd);
}

void run_client() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation error");
        exit(EXIT_FAILURE);
    }

    // Set server address
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 address from text to binary
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("Invalid address or address not supported");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }

    // Receive and display the date and time
    read(sock, buffer, 1024);
    printf("Server: %s\n", buffer);

    close(sock);
}

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        // Child process acts as the client
        sleep(1); // Wait for the server to be ready
        run_client();
    } else if (pid > 0) {
        // Parent process acts as the server
        run_server();
    } else {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    return 0;
}


//OUTPUT:
Server is running... Waiting for connections.
Date and time sent to client.
Server: Current Date and Time: 2024-11-22 07:54:47
